function init(self)
	self.PADDING = 100
	self.SIZE = 100
	self.number = 0
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash('create_big_asteroid') then
		factory.create('#big_asteroid_factory', go.get_position(sender))
	end
	if message_id == hash('create_medium_asteroid') then
		factory.create('#medium_asteroid_factory', go.get_position(sender))
		factory.create('#medium_asteroid_factory', go.get_position(sender))
	end
	if message_id == hash('create_small_asteroid') then
		factory.create('#small_asteroid_factory', go.get_position(sender))
		factory.create('#medium_asteroid_factory', go.get_position(sender))
	end
	if message_id == hash('create_explosion') then
		factory.create('#explosion_factory', go.get_position(sender))
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

function new_position(self)
	local SCREEN_WIDTH = tonumber(sys.get_config("display.width"))
	local SCREEN_HEIGHT = tonumber(sys.get_config("display.height"))
	local position = vmath.vector3(math.random(SCREEN_WIDTH), math.random(SCREEN_HEIGHT), 0.1)
	local rand4 = vmath.random(4)
	if rand4 == 1 then
		position.x = -self.SIZE
	elseif rand4 == 2 then
		position.x = SCREEN_WIDTH + self.SIZE
	elseif rand4 == 3 then
		position.y = -self.SIZE
	elseif rand4 == 4 then
		position.y = SCREEN_HEIGHT + self.SIZE
	end
	go.set_position(position)
end

function new_direction(self)
	local SCREEN_WIDTH = tonumber(sys.get_config("display.width"))
	local SCREEN_HEIGHT = tonumber(sys.get_config("display.height"))
	local position = go.get_position()
	local target = vmath.vector3(math.random(SCREEN_WIDTH - self.PADDING * 2) + self.PADDING, math.random(SCREEN_HEIGHT - self.PADDING * 2) + self.PADDING, position.z)
	self.direction = vmath.normalize(target - position)
end