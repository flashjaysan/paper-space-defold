function init(self)
	msg.post('.', 'acquire_input_focus')
	-- disable flame reactor sprite
	msg.post('#thrust_sprite', 'disable')

	-- set input actions to false
	self.left = false
	self.right = false
	self.up = false
	self.down = false
	self.action = false

	-- set constants and instance values
	self.lives = 3
	self.ANGULAR_SPEED = 200
	self.speed = 0
	self.MAX_SPEED = 600
	self.THRUST_POWER = 300
	self.dx = 0
	self.dy = 0
	self.angle = go.get('.', 'euler.z')
	self.position = go.get_position()
	self.motor_is_playing = false
end


function reset(self)
	self.lives = self.lives - 1
	msg.post('game:/lives/lives#lives', 'update_lives', {lives = self.lives})
	self.speed = 0
	self.dx = 0
	self.dy = 0
	msg.post('#boom', 'play_sound')
	go.set_position(vmath.vector3(tonumber(sys.get_config("display.width")) / 2, tonumber(sys.get_config("display.height")) / 2, 0.5))
	if self.lives < 0 then
		msg.post('main:/collections_manager', 'load_gameover')
	end
end


function update(self, dt)
	self.angle = go.get('.', 'euler.z')
	self.position = go.get_position()
	set_angle_and_speed_from_input(self, dt)
	manage_sound(self, dt)
	calculate_velocity(self, dt)
	set_position(self)
	fire_bullet(self)
end


function on_input(self, action_id, action)
	if action_id == hash('left') then
		self.left = not action.released
	end
	if action_id == hash('right') then
		self.right = not action.released
	end
	if action_id == hash('up') then
		self.up = not action.released
	end
	if action_id == hash('down') then
		self.down = not action.released
	end
	if action_id == hash('action') then
		self.action = action.pressed
	end	
end


function on_message(self, message_id, message, sender)
	if message_id == hash('collision_response') then
		if message.other_group == hash('asteroid') or message.other_group == hash('ufo') then
			local position = go.get_position()
			position.z = 0.01
			factory.create('game:/factories#explosion_factory', position)
			reset(self)
		end
	end
end


function set_position(self)
	self.position.x = self.position.x + self.dx
	self.position.y = self.position.y + self.dy
	wrap_around(self)
	go.set_position(self.position)
end


function wrap_around(self)
	local SCREEN_WIDTH = tonumber(sys.get_config("display.width"))
	local SCREEN_HEIGHT = tonumber(sys.get_config("display.height"))
	if self.position.x > SCREEN_WIDTH then
		self.position.x = 0
	end
	if self.position.x < 0 then
		self.position.x = SCREEN_WIDTH
	end
	if self.position.y > SCREEN_HEIGHT then
		self.position.y = 0
	end
	if self.position.y < 0 then
		self.position.y = SCREEN_HEIGHT
	end
end


function calculate_velocity(self, dt)
	self.dx = math.cos(math.rad(self.angle)) * self.speed * dt
	self.dy = math.sin(math.rad(self.angle)) * self.speed * dt
end


function cap_speed(self)
	if self.speed > self.MAX_SPEED then
		self.speed = self.MAX_SPEED
	end
end


function set_angle_and_speed_from_input(self, dt)
	if self.left then
		self.angle = self.angle + self.ANGULAR_SPEED * dt
		go.set('.', 'euler.z', self.angle)
	end

	if self.right then
		self.angle = self.angle - self.ANGULAR_SPEED * dt
		go.set('.', 'euler.z', self.angle)
	end

	if self.up then
		self.speed = self.speed + self.THRUST_POWER * dt
	end

	if self.down then
		self.speed = self.speed - self.THRUST_POWER * 2 * dt
	end

	if self.speed <= 0 then
		self.speed = 0
		-- disable flame reactor sprite
		msg.post('#thrust_sprite', 'disable')
	else
		-- enable flame reactor sprite
		msg.post('#thrust_sprite', 'enable')
	end
	cap_speed(self)
end


function fire_bullet(self)
	if self.action then
		--create a bullet
		factory.create("/ship/bullets_factory#bullets_factory", vmath.vector3(self.position.x, self.position.y, self.position.z - 0.01), go.get_rotation(), {dx = math.cos(math.rad(self.angle)), dy = math.sin(math.rad(self.angle))})
		self.action = false
	end
end

function manage_sound(self, dt)
	if self.speed <= 0 then
		self.speed = 0
		msg.post('#motor', 'stop_sound')
		self.motor_is_playing = false
	else
		if not self.motor_is_playing then
			msg.post('#motor', 'play_sound')
			self.motor_is_playing = true
		end
	end
end
